{-# OPTIONS  #-}


-- parser (data) produced by Happy (GLR) Version 1.19.5

module GrammerData where

module Hubris.Grammer where

import Hubris.Syntax

import Bound
import Data.List
import Control.Applicative(Applicative(..))
import Control.Monad (ap)


{-# LINE 1 "templates/GLR_Base.hs" #-}
{-# LINE 1 "templates/GLR_Base.hs" #-}
{-# LINE 1 "<built-in>" #-}
{-# LINE 1 "templates/GLR_Base.hs" #-}
{- GLR_Base.lhs
   Id: GLR_Base.lhs,v 1.4 2004/12/04 15:01:37 paulcc Exp 
-}

-- Basic defs required for compiling the data portion of the parser

-- We're creating Int-indexed graphs

type ForestId  = (Int,Int,GSymbol)


-- Actions for the GLR machine

data GLRAction = Shift Int [Reduction]
               | Reduce [Reduction]
               | Accept
               | Error

---
-- A Reduction (s,n,f) removes the top n node-ids, creates a new branch from these
-- and labels the branch with the given symbol s. Additionally, the branch may
-- hold some semantic value.

type Reduction = (GSymbol,Int, [ForestId] -> Branch)


---
-- A Branch holds the semantic result plus node ids of children

data Branch
 = Branch {b_sem :: GSem, b_nodes :: [ForestId]}
   deriving Show

instance Eq Branch where
	b1 == b2 = b_nodes b1 == b_nodes b2



-------------------------------------------------------------------------------
-- Utilities for decoding

---
-- Tree decode unpacks the forest into a list of results
--  - this is ok for small examples, but inefficient for very large examples
--  - the data file contains further instances
--  - see documentation for further information
--  - "Decode_Result" is a synonym used to insert the monad type constr (or not)

class TreeDecode a where
	decode_b :: (ForestId -> [Branch]) -> Branch -> [Decode_Result a]

decode :: TreeDecode a => (ForestId -> [Branch]) -> ForestId -> [Decode_Result a]
decode f i@(_,_,HappyTok t)
  = decode_b f (Branch (SemTok t) [])
decode f i
  = [ d | b <- f i, d <- decode_b f b ]

---- generated by Happy, since it means expansion of synonym (not ok in H-98)
--instance TreeDecode UserDefTok where
--	decode_b f (Branch (SemTok t) []) = [happy_return t]

---
-- this is used to multiply the ambiguous possibilities from children

--cross_fn :: [a -> b] -> [a] -> [b]
--actual type will depend on monad in use.
--happy_ap defined by parser generator
cross_fn fs as = [ f `happy_ap` a | f <- fs, a <- as]

---
-- Label decoding unpacks from the Semantic wrapper type
--  - this allows arbitrary values (within the limits of the compiler settings)
--    to be recovered from nodes in the tree.
--  - again, more instances are written in the data file
--  - see documentation for further information

class LabelDecode a where
	unpack :: GSem -> a

---- generated by Happy, since it means expansion of synonym (not ok in H-98)
--instance LabelDecode UserDefTok where
--	unpack (SemTok t) = t





{-# LINE 107 "src/Hubris/GrammerData.hs"#-}



{-# LINE 111 "src/Hubris/GrammerData.hs"#-}

data GSymbol = HappyEOF | HappyTok {-!Int-} (Token) | G_Term 
   deriving (Show,Eq,Ord)

data GSem
 = NoSem
 | SemTok (Token) | Sem_0 (()) 
 | Sem_1 (()) 
 | Sem_2 (()) 
 | Sem_3 (()) 
 | Sem_4 (()) 
   deriving (Show)


semfn_0_0 ns@(happy_rest) =  Branch (Sem_0 (Type)) ns
semfn_1_0 ns@(happy_var_1:(_,_,HappyTok ((TVar happy_var_2))):happy_var_3:happy_var_4:happy_var_5:happy_var_6:happy_rest) =  Branch (Sem_1 (Pi happy_var_4 (abstract (`elemIndex` [happy_var_2]) happy_var_6))) ns
semfn_2_0 ns@((_,_,HappyTok ((TVar happy_var_1))):happy_rest) =  Branch (Sem_2 (Var happy_var_1)) ns
semfn_3_0 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_3 (Apply happy_var_1 happy_var_2)) ns
semfn_4_0 ns@((_,_,HappyTok ((TVar happy_var_1))):happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_4 (Lam (abstract (`elemIndex` [happy_var_1]) happy_var_3))) ns


type Decode_Result a = a
happy_ap = ($)
happy_return = id
instance LabelDecode (()) where 
	unpack (Sem_0 s) = s
	unpack (Sem_1 s) = s
	unpack (Sem_2 s) = s
	unpack (Sem_3 s) = s
	unpack (Sem_4 s) = s


type UserDefTok = Token
instance TreeDecode (Token) where
	decode_b f (Branch (SemTok t) []) = [happy_return t]
instance LabelDecode (Token) where
	unpack (SemTok t) = t


action 0 ( HappyTok (TForall) ) = Shift 4 []
action 0 ( HappyTok (TVar _) ) = Shift 5 []
action 0 ( HappyTok (TStar) ) = Shift 2 []
action 1 ( HappyTok (TStar) ) = Shift 2 []
action 2 ( HappyTok (TForall) ) = Reduce [red_1]
action 2 ( HappyTok (TVar _) ) = Reduce [red_1]
action 2 ( HappyTok (TStar) ) = Reduce [red_1]
action 2 ( HappyTok (TDot) ) = Reduce [red_1]
action 2 ( HappyEOF ) = Reduce [red_1]
action 3 ( HappyTok (TForall) ) = Shift 4 []
action 3 ( HappyTok (TVar _) ) = Shift 5 []
action 3 ( HappyTok (TStar) ) = Shift 2 []
action 3 ( HappyEOF ) = Accept
action 4 ( HappyTok (TVar _) ) = Shift 7 []
action 5 ( HappyTok (TForall) ) = Reduce [red_3]
action 5 ( HappyTok (TVar _) ) = Reduce [red_3]
action 5 ( HappyTok (TStar) ) = Reduce [red_3]
action 5 ( HappyTok (TArrow) ) = Shift 6 []
action 5 ( HappyTok (TDot) ) = Reduce [red_3]
action 5 ( HappyEOF ) = Reduce [red_3]
action 6 ( HappyTok (TForall) ) = Shift 4 []
action 6 ( HappyTok (TVar _) ) = Shift 5 []
action 6 ( HappyTok (TStar) ) = Shift 2 []
action 7 ( HappyTok (TColon) ) = Shift 9 []
action 8 ( HappyTok (TForall) ) = Shift 4 [red_4]
action 8 ( HappyTok (TVar _) ) = Shift 5 [red_4]
action 8 ( HappyTok (TStar) ) = Shift 2 [red_4]
action 8 ( HappyTok (TDot) ) = Reduce [red_4]
action 8 ( HappyEOF ) = Reduce [red_4]
action 9 ( HappyTok (TForall) ) = Shift 4 []
action 9 ( HappyTok (TVar _) ) = Shift 5 []
action 9 ( HappyTok (TStar) ) = Shift 2 []
action 10 ( HappyTok (TForall) ) = Shift 4 [red_5]
action 10 ( HappyTok (TVar _) ) = Shift 5 [red_5]
action 10 ( HappyTok (TStar) ) = Shift 2 [red_5]
action 10 ( HappyTok (TDot) ) = Reduce [red_5]
action 10 ( HappyEOF ) = Reduce [red_5]
action 11 ( HappyTok (TForall) ) = Shift 4 []
action 11 ( HappyTok (TVar _) ) = Shift 5 []
action 11 ( HappyTok (TStar) ) = Shift 2 []
action 11 ( HappyTok (TDot) ) = Shift 12 []
action 12 ( HappyTok (TForall) ) = Shift 4 []
action 12 ( HappyTok (TVar _) ) = Shift 5 []
action 12 ( HappyTok (TStar) ) = Shift 2 []
action 13 ( HappyTok (TForall) ) = Shift 4 [red_2]
action 13 ( HappyTok (TVar _) ) = Shift 5 [red_2]
action 13 ( HappyTok (TStar) ) = Shift 2 [red_2]
action 13 ( HappyTok (TDot) ) = Reduce [red_2]
action 13 ( HappyEOF ) = Reduce [red_2]
action _ _ = Error
red_1 = (G_Term,1 :: Int,semfn_0_0)
red_2 = (G_Term,6 :: Int,semfn_1_0)
red_3 = (G_Term,1 :: Int,semfn_2_0)
red_4 = (G_Term,2 :: Int,semfn_3_0)
red_5 = (G_Term,3 :: Int,semfn_4_0)
goto 0 G_Term = 3

goto 3 G_Term = 8

goto 6 G_Term = 10

goto 8 G_Term = 8

goto 9 G_Term = 11

goto 10 G_Term = 8

goto 11 G_Term = 8

goto 12 G_Term = 13

goto 13 G_Term = 8

goto _ _ = -1
